[{"title":"StackQueue","type":0,"sectionRef":"#","url":"/rbx-util/api/StackQueue","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"StackQueue","url":"/rbx-util/api/StackQueue#functions","content":" "},{"title":"new​","type":1,"pageTitle":"StackQueue","url":"/rbx-util/api/StackQueue#new","content":"&lt;/&gt; StackQueue.new() → StackQueue Creates StackQueue instance.  "},{"title":"Append​","type":1,"pageTitle":"StackQueue","url":"/rbx-util/api/StackQueue#Append","content":"&lt;/&gt; StackQueue:Append(fn: Function) → () Append function to queue. "},{"title":"AdminService","type":0,"sectionRef":"#","url":"/rbx-util/api/AdminService","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"AdminService","url":"/rbx-util/api/AdminService#properties","content":" "},{"title":"AdminSelector​","type":1,"pageTitle":"AdminService","url":"/rbx-util/api/AdminService#AdminSelector","content":"&lt;/&gt; AdminService.AdminSelector: AdminSelector  "},{"title":"Functions​","type":1,"pageTitle":"AdminService","url":"/rbx-util/api/AdminService#functions","content":" "},{"title":"commandParameters​","type":1,"pageTitle":"AdminService","url":"/rbx-util/api/AdminService#commandParameters","content":"&lt;/&gt; AdminService.commandParameters(source: string) → {string} Parse source parameters.  "},{"title":"playerFromName​","type":1,"pageTitle":"AdminService","url":"/rbx-util/api/AdminService#playerFromName","content":"&lt;/&gt; AdminService.playerFromName( name: string, me: Player ) → Player?  Get Player by name.  "},{"title":"playersFromNames​","type":1,"pageTitle":"AdminService","url":"/rbx-util/api/AdminService#playersFromNames","content":"&lt;/&gt; AdminService.playersFromNames( names: {string}, me: Player ) → {Player } Get players with name list.  "},{"title":"AddSelector​","type":1,"pageTitle":"AdminService","url":"/rbx-util/api/AdminService#AddSelector","content":"&lt;/&gt; AdminService:AddSelector(selector: AdminSelector) → () Add admin selector.  "},{"title":"IsActiveAdmin​","type":1,"pageTitle":"AdminService","url":"/rbx-util/api/AdminService#IsActiveAdmin","content":"&lt;/&gt; AdminService:IsActiveAdmin(userId: number | Player ) → boolean Check if player is admin.  "},{"title":"AddCommand​","type":1,"pageTitle":"AdminService","url":"/rbx-util/api/AdminService#AddCommand","content":"&lt;/&gt; AdminService:AddCommand( name: string, alias: string?, callback: ( origin: TextSource , source: string ) → string ) → () Bind a callback to an admin command endpoint. "},{"title":"Maid","type":0,"sectionRef":"#","url":"/rbx-util/api/Maid","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Maid","url":"/rbx-util/api/Maid#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Maid","url":"/rbx-util/api/Maid#new","content":"&lt;/&gt; Maid.new() → Maid Creates Maid instance.  "},{"title":"Add​","type":1,"pageTitle":"Maid","url":"/rbx-util/api/Maid#Add","content":"&lt;/&gt; Maid:Add(item: Variant) → Variant Add item to array.  "},{"title":"Append​","type":1,"pageTitle":"Maid","url":"/rbx-util/api/Maid#Append","content":"&lt;/&gt; Maid:Append(items: {Variant}) → {Variant} Add array of items to array.  "},{"title":"Destroy​","type":1,"pageTitle":"Maid","url":"/rbx-util/api/Maid#Destroy","content":"&lt;/&gt; Maid:Destroy() → () Cleanup array. "},{"title":"AdminSelector","type":0,"sectionRef":"#","url":"/rbx-util/api/AdminSelector","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"AdminSelector","url":"/rbx-util/api/AdminSelector#properties","content":" "},{"title":"UserId​","type":1,"pageTitle":"AdminSelector","url":"/rbx-util/api/AdminSelector#UserId","content":"&lt;/&gt; AdminSelector.UserId: number?   "},{"title":"GroupId​","type":1,"pageTitle":"AdminSelector","url":"/rbx-util/api/AdminSelector#GroupId","content":"&lt;/&gt; AdminSelector.GroupId: number?   "},{"title":"MinRank​","type":1,"pageTitle":"AdminSelector","url":"/rbx-util/api/AdminSelector#MinRank","content":"&lt;/&gt; AdminSelector.MinRank: number?  "},{"title":"Functions​","type":1,"pageTitle":"AdminSelector","url":"/rbx-util/api/AdminSelector#functions","content":" "},{"title":"user​","type":1,"pageTitle":"AdminSelector","url":"/rbx-util/api/AdminSelector#user","content":"&lt;/&gt; AdminSelector.user(userId: number) → AdminSelector Create user selector.  "},{"title":"group​","type":1,"pageTitle":"AdminSelector","url":"/rbx-util/api/AdminSelector#group","content":"&lt;/&gt; AdminSelector.group( groupId: number, minRank: number? ) → AdminSelector Create group selector.  "},{"title":"MatchPlayer​","type":1,"pageTitle":"AdminSelector","url":"/rbx-util/api/AdminSelector#MatchPlayer","content":"&lt;/&gt; AdminSelector:MatchPlayer(player: Player ) → boolean Check if player matches selector. "},{"title":"compose","type":0,"sectionRef":"#","url":"/rbx-util/api/compose","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"compose","url":"/rbx-util/api/compose#functions","content":" "},{"title":"compose​","type":1,"pageTitle":"compose","url":"/rbx-util/api/compose#compose","content":"&lt;/&gt; compose.compose() → () Creates an Instance and assigns properties. "},{"title":"Arc","type":0,"sectionRef":"#","url":"/rbx-util/api/Arc","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Arc","url":"/rbx-util/api/Arc#properties","content":" "},{"title":"Alpha​","type":1,"pageTitle":"Arc","url":"/rbx-util/api/Arc#Alpha","content":"&lt;/&gt; Arc.Alpha: Vector3  Arc Start position.  "},{"title":"Omega​","type":1,"pageTitle":"Arc","url":"/rbx-util/api/Arc#Omega","content":"&lt;/&gt; Arc.Omega: Vector3  Arc End position.  "},{"title":"MaxHeight​","type":1,"pageTitle":"Arc","url":"/rbx-util/api/Arc#MaxHeight","content":"&lt;/&gt; Arc.MaxHeight: number Arc height at peak.  "},{"title":"Visible​","type":1,"pageTitle":"Arc","url":"/rbx-util/api/Arc#Visible","content":"&lt;/&gt; Arc.Visible: boolean Wether arc is visible or not. "},{"title":"Functions​","type":1,"pageTitle":"Arc","url":"/rbx-util/api/Arc#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Arc","url":"/rbx-util/api/Arc#new","content":"&lt;/&gt; Arc.new( alpha: Vector3 , omega: Vector3 ) → Arc Creates Arc instance.  "},{"title":"Destroy​","type":1,"pageTitle":"Arc","url":"/rbx-util/api/Arc#Destroy","content":"&lt;/&gt; Arc:Destroy() → () Destroys Arc instance.  "},{"title":"Calculate​","type":1,"pageTitle":"Arc","url":"/rbx-util/api/Arc#Calculate","content":"&lt;/&gt; Arc:Calculate() → () Calculate arc attachments and beams.  "},{"title":"Tween​","type":1,"pageTitle":"Arc","url":"/rbx-util/api/Arc#Tween","content":"&lt;/&gt; Arc:Tween( part: BasePart , tweenInfo: TweenInfo ) → () Tween part in arc. "},{"title":"Repository","type":0,"sectionRef":"#","url":"/rbx-util/api/Repository","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Repository","url":"/rbx-util/api/Repository#properties","content":" "},{"title":"Name​","type":1,"pageTitle":"Repository","url":"/rbx-util/api/Repository#Name","content":"&lt;/&gt; Repository.Name: string DataStore name to use when accessing DataStoreService.  "},{"title":"Interval​","type":1,"pageTitle":"Repository","url":"/rbx-util/api/Repository#Interval","content":"&lt;/&gt; Repository.Interval: number Interval at which connected players' entities are saved.  "},{"title":"Entity​","type":1,"pageTitle":"Repository","url":"/rbx-util/api/Repository#Entity","content":"&lt;/&gt; Repository.Entity: Entity Entity class used when initializing players' entities. "},{"title":"Functions​","type":1,"pageTitle":"Repository","url":"/rbx-util/api/Repository#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Repository","url":"/rbx-util/api/Repository#new","content":"&lt;/&gt; Repository.new(init: Repository?) → Repository Creates a Repository.  "},{"title":"Get​","type":1,"pageTitle":"Repository","url":"/rbx-util/api/Repository#Get","content":"&lt;/&gt; Repository:Get( id: number | string | Player , forceUpdate: boolean? ) → Entity "},{"title":"Types","type":1,"pageTitle":"Repository","url":"/rbx-util/api/Repository##","content":""},{"title":"​","type":1,"pageTitle":"Repository","url":"/rbx-util/api/Repository#Entity","content":"interface Entity { Start: ( self: Entity, player: Player? ) → () Update: ( self: Entity, player: Player? ) → () }  Gets an Entity at given id.  "},{"title":"Save​","type":1,"pageTitle":"Repository","url":"/rbx-util/api/Repository#Save","content":"&lt;/&gt; Repository:Save(id: number | string | Player ) → () Saves an Entity at given id. "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/rbx-util/docs/intro","content":"","keywords":""},{"title":"Wally Configuration​","type":1,"pageTitle":"Getting Started","url":"/rbx-util/docs/intro#wally-configuration","content":"Once Wally is installed, run wally init on your project directory, and then add the various utility modules found here as dependencies. For example, the following could be a wally.toml file for a project that includes a few of these modules: [package] name = &quot;your_name/your_project&quot; version = &quot;0.1.0&quot; registry = &quot;https://github.com/UpliftGames/wally-index&quot; realm = &quot;shared&quot; [dependencies] Maid = &quot;rasmusmerzin/maid@1&quot; Repository = &quot;rasmusmerzin/repository@1&quot; StackQueue = &quot;rasmusmerzin/stackqueue@1&quot; compose = &quot;rasmusmerzin/compose@1&quot;  To install these dependencies, run wally install within your project. Wally will create a Package folder in your directory with the installed dependencies. "},{"title":"Rojo Configuration​","type":1,"pageTitle":"Getting Started","url":"/rbx-util/docs/intro#rojo-configuration","content":"The Package folder created by Wally should be synced into Roblox Studio through your Rojo configuration. For instance, a Rojo configuration might have the following entry to sync the Packages folder into ReplicatedStorage: { &quot;name&quot;: &quot;rbx-util-example&quot;, &quot;tree&quot;: { &quot;$className&quot;: &quot;DataModel&quot;, &quot;ReplicatedStorage&quot;: { &quot;$className&quot;: &quot;ReplicatedStorage&quot;, &quot;Packages&quot;: { &quot;$path&quot;: &quot;Packages&quot; } } } }  "},{"title":"Usage Example​","type":1,"pageTitle":"Getting Started","url":"/rbx-util/docs/intro#usage-example","content":"The installed dependencies can now be used in scripts, such as the following: -- Reference folder with packages: local Packages = game:GetService(&quot;ReplicatedStorage&quot;).Packages -- Require the utility modules: local Repository = require(Packages.Repository) -- Use the modules: local ProfileRepository = Repository.new({ Name = &quot;Profiles&quot; }) function ProfileRepository.Entity:Start(player: Player?) if player then self.DisplayName = player.DisplayName end end  "}]