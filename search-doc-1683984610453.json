[{"title":"compose","type":0,"sectionRef":"#","url":"/rbx-util/docs/intro","content":"compose function compose( className: string, properties: Table&lt;string, any&gt;?, children: { Instance }? ): Instance Maid type Maid = { new: Function&lt;Maid&gt;, Add: Function&lt;Variant, (Maid, Variant)&gt;, Append: Function&lt;{ Variant }, (Maid, { Variant })&gt;, Destroy: Function&lt;void, Maid&gt; } StackQueue type StackQueue = { new: Function&lt;StackQueue&gt;, Append: Function&lt;void, StackQueue&gt;, } Repository DataStore wrapper utility. type Repository = { new: Function&lt;Repository, Init&gt;, Get: Function&lt;Repository.Entity, (Repository, number | string | Player)&gt;, Entity.Start: Function&lt;void, (Repository.Entity, Player)&gt; } Message Bundle of services for sending messages to clients. AnnouncementService :Announce(message: string, options: AnnouncementOptions?):AnnounceFor(player: Player, message: string, options: AnnouncementOptions?) CountdownService :Countdown(count: Integer) DialogueService :DialogueFor(player: Player, options: DialogueOptions?): Signal HitmarkerService :HitmarkerFor(player: Player, content: string) LoadingService :SetLoading(loading: boolean):SetLoadingFor(player: Player, loading: boolean) LogService :LogAll(message: string):LogTo(player: Player, message: string) Bar Bundle of bar widgets. Includes Health and Clock UI. ClockService :SetClock(startMillis: number, endMillis: number) PlayerList Player list gui which in addition to players shows bots. IsoCamera Isometric view camera.","keywords":""}]